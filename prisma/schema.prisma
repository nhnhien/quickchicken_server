generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  phone         String         @unique
  email         String         @unique
  password      String
  address       String?
  role_id       Int
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  role          Role           @relation(fields: [role_id], references: [id])
  orders        Order[]
  userDiscounts UserDiscount[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  price            Float
  image            String?
  description      String?
  stock            Int
  category_id      Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  category         Category          @relation(fields: [category_id], references: [id])
  productOptions   ProductOption[]
  productDiscounts ProductDiscount[]
  orderDetails     OrderDetail[]
}

model Option {
  id               Int             @id @default(autoincrement())
  name             String
  value            String
  additional_price Float?          @default(0.0)
  productOptions   ProductOption[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())@updatedAt
}

model ProductOption {
  id         Int      @id @default(autoincrement())
  product_id Int
  option_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  option     Option   @relation(fields: [option_id], references: [id])
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

enum OrderStatus {
  pending
  preparing
  shipped
  delivered
  cancelled
}

model Order {
  id           Int           @id @default(autoincrement())
  user_id      Int
  total_price  Float
  status       OrderStatus   @default(pending)
  note         String?       
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [id])
  orderDetails OrderDetail[]
  payments     Payment[]
  deliveries   Delivery[]
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Float
  options    String?
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
}

model Discount {
  id               Int               @id @default(autoincrement())
  title            String
  type             String // percent/fixed
  apply_to         String?
  code             String            @unique
  value            Float
  start_date       DateTime
  end_date         DateTime
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  productDiscounts ProductDiscount[]
  userDiscounts    UserDiscount[]
}

model ProductDiscount {
  id          Int      @id @default(autoincrement())
  discount_id Int
  product_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  discount    Discount @relation(fields: [discount_id], references: [id])
  product     Product  @relation(fields: [product_id], references: [id])
}

model UserDiscount {
  id          Int      @id @default(autoincrement())
  discount_id Int
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  discount    Discount @relation(fields: [discount_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
}


enum PaymentStatus {
  pending
  completed
  cancelled
  failed
  refunded
}
model Payment {
  id                Int       @id @default(autoincrement())
  order_id          Int
  payment_method    String
  status            PaymentStatus @default(pending)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  txn_ref           String      @default("N/A")    // Mã giao dịch VNPay
  amount            Int         @default(0)   // Số tiền thanh toán
  bank_code         String?   // Mã ngân hàng
  transaction_no    String?   // Mã giao dịch của VNPay
  card_type         String?   // Loại thẻ (ATM, Credit, v.v.)
  order_info        String?   // Thông tin đơn hàng
  pay_date          DateTime? // Thời gian thanh toán
  response_code     String?   // Mã phản hồi của VNPay
  tmn_code          String?   // Mã TMN của Merchant
  transaction_status String?  // Trạng thái giao dịch
  secure_hash       String?   // Secure Hash dùng để kiểm tra tính hợp lệ của dữ liệu
  order             Order     @relation(fields: [order_id], references: [id])
}

enum DeliveryStatus {
  delivering
  delivered
  cancelled
}

model Delivery {
  id            Int            @id @default(autoincrement())
  order_id      Int
  address       String
  status        DeliveryStatus @default(delivering)
  delivery_time DateTime?
  order         Order          @relation(fields: [order_id], references: [id])
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}
